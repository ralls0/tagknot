rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Regola generica per i dati privati dell'utente.
    // Consente a un utente autenticato di leggere e scrivere solo nei propri documenti privati
    // sotto il percorso /artifacts/{appId}/users/{userId}/
    match /artifacts/{appId}/users/{userId}/{documents=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Regole specifiche per la sub-collezione 'profile/data' sotto ogni utente.
    // Questa collezione contiene i dettagli del profilo (username, profileTag, profileImage, followers, following).
    // - Qualsiasi utente autenticato può leggere i profili (necessario per la ricerca utenti e la visualizzazione del profilo di altri).
    // - Solo il proprietario del profilo può creare o aggiornare il proprio profilo.
    match /artifacts/{appId}/users/{userId}/profile/data {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Regole per la collezione di eventi pubblici.
    // Questi eventi sono accessibili a tutti gli utenti autenticati per la lettura (feed, ricerca).
    // La creazione, l'aggiornamento e l'eliminazione sono consentite solo al creatore dell'evento.
    match /artifacts/{appId}/public/data/events/{eventId} {
      allow read: if request.auth != null; // Qualsiasi utente autenticato può leggere

      // Permessi per creazione, aggiornamento ed eliminazione dell'evento:
      // Solo il creatore dell'evento può eseguire queste operazioni.
      allow create: if request.auth != null && request.resource.data.creatorId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.creatorId == request.auth.uid;

      // Permessi specifici per aggiornamenti che non siano creazione/eliminazione completa dell'evento,
      // ma modifiche a campi come 'likes' o 'taggedUsers'.
      allow update: if request.auth != null && (
        // L'utente è il creatore dell'evento (copre tutte le modifiche)
        resource.data.creatorId == request.auth.uid ||

        // L'utente sta aggiungendo o rimuovendo il proprio like
        // Si assicura che solo il campo 'likes' venga modificato in questo contesto
        (
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']) &&
          request.resource.data.likes is list &&
          resource.data.likes is list &&
          (
            request.resource.data.likes.hasAll(resource.data.likes) || // Aggiunta di like
            resource.data.likes.hasAll(request.resource.data.likes)    // Rimozione di like
          )
        ) ||

        // L'utente sta rimuovendo il proprio tag dall'evento
        // Si assicura che solo il campo 'taggedUsers' venga modificato in questo contesto
        (
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['taggedUsers']) &&
          request.resource.data.taggedUsers is list &&
          resource.data.taggedUsers is list &&
          resource.data.taggedUsers.hasAny([request.auth.token.profileTag]) && // Richiede che il tag dell'utente sia presente prima
          !(request.resource.data.taggedUsers.hasAny([request.auth.token.profileTag])) // E non sia presente dopo (rimozione)
          // Nota: request.auth.token.profileTag richiede che tu abbia impostato un custom claim 'profileTag'
          // per l'utente al momento del login o della registrazione. Se non lo fai, questa condizione fallirà.
          // In alternativa, puoi usare un approccio basato sul userId se il tag è sempre lo stesso del userId.
          // Per ora, ho mantenuto la logica che implica un custom claim.
        )
      );
    }

    // Regole per la sub-collezione 'comments' sotto ogni evento pubblico.
    // - Qualsiasi utente autenticato può leggere i commenti.
    // - Qualsiasi utente autenticato può creare un commento.
    // - L'aggiornamento e l'eliminazione di un commento sono consentite solo al creatore del commento.
    match /artifacts/{appId}/public/data/events/{eventId}/comments/{commentId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Regole per la sub-collezione 'notifications' sotto ogni utente.
    // Solo il proprietario delle notifiche può leggerle o marcarle come lette.
    match /artifacts/{appId}/users/{userId}/notifications/{notificationId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Permette la lettura della collezione 'profile' per le Collection Group Queries
    // Questo è necessario per la ricerca di utenti per username.
    // NOTA: Questa regola è per collectionGroup, non per documenti specifici.
    match /{path=**}/profile/{docId} {
        allow read: if request.auth != null;
    }

    // Altre collezioni/documenti bloccati per default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

// rules_version = '2';
// service cloud.firestore {
//   match /databases/{database}/documents {
//     match /{document=**} {
//       allow read, write: if request.auth != null;
//     }
//   }
// }
